{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FileUpload","React","useState","file","setFile","id","className","type","onChange","event","target","files","name","size","image","ImageThumb","src","URL","createObjectURL","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAOA,SAASA,IAAa,MAEIC,IAAMC,SAAS,IAFnB,mBAEbC,EAFa,KAEPC,EAFO,KAYpB,OACE,sBAAKC,GAAG,aAAR,UACE,oBAAIC,UAAU,UAAd,+CAGA,uBAAOC,KAAK,OAAOC,SAZvB,SAAsBC,GACpBL,EAAQK,EAAMC,OAAOC,MAAM,KAWkBL,UAAU,UAErD,oBAAGA,UAAU,UAAb,uBAAmCH,EAAKS,QACxC,oBAAGN,UAAU,UAAb,wBAAmCH,EAAKI,QACxC,oBAAGD,UAAU,UAAb,wBAAmCH,EAAKU,KAAxC,YACCV,GAAQ,cAAC,EAAD,CAAYW,MAAOX,OAQlC,IAAMY,EAAa,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACpB,OAAO,qBAAKE,IAAKC,IAAIC,gBAAgBJ,GAAQK,IAAKL,EAAMF,QAI3C,SAASQ,IACtB,OAAO,cAACpB,EAAD,IC3CT,IAYeqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.08bfb28b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\n/**\r\n * Component to handle file upload. Works for image\r\n * uploads, but can be edited to work for any file.\r\n */\r\nfunction FileUpload() {\r\n  // State to store uploaded file\r\n  const [file, setFile] = React.useState(\"\");\r\n\r\n  // Handles file upload event and updates state\r\n  function handleUpload(event) {\r\n    setFile(event.target.files[0]);\r\n\r\n    // Add code here to upload file to server\r\n    // ...\r\n  }\r\n\r\n  return (\r\n    <div id=\"upload-box\">\r\n      <h2 className=\"heading\">\r\n      Tool to display text into a table\r\n      </h2>\r\n      <input type=\"file\" onChange={handleUpload} className=\"field\" />\r\n\r\n      <p className=\"details\" >Filename: {file.name}</p>\r\n      <p className=\"details\">File type: {file.type}</p>\r\n      <p className=\"details\">File size: {file.size} bytes</p>\r\n      {file && <ImageThumb image={file} />}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Component to display thumbnail of image.\r\n */\r\nconst ImageThumb = ({ image }) => {\r\n  return <img src={URL.createObjectURL(image)} alt={image.name} />;\r\n};\r\n\r\n\r\nexport default function App() {\r\n  return <FileUpload />;\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}